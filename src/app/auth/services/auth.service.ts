import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import {
  signInWithEmailAndPassword,
  createUserWithEmailAndPassword,
  signOut,
  onAuthStateChanged,
  User
} from 'firebase/auth';
import { BehaviorSubject } from 'rxjs';
import { auth } from '../../../app/app.module'; // Aseg√∫rate de que aqu√≠ importas tu instancia correctamente

@Injectable({ providedIn: 'root' })
export class AuthService {
  private isLoggedInSubject = new BehaviorSubject<boolean>(false);

  constructor(private router: Router) {
    // Detectar autom√°ticamente si hay sesi√≥n activa
    onAuthStateChanged(auth, (user: User | null) => {
      const loggedIn = !!user;
      this.isLoggedInSubject.next(loggedIn);
      console.log(loggedIn ? '‚úÖ Usuario autenticado' : '‚õî Usuario no autenticado');
    });
  }

  /**
   * Inicia sesi√≥n con email y contrase√±a
   */
  login(email: string, password: string): Promise<void> {
    return signInWithEmailAndPassword(auth, email, password)
      .then(() => {
        this.isLoggedInSubject.next(true);
        console.log('üîì Login exitoso');
      })
      .catch((error) => {
        console.error('‚ùå Error al iniciar sesi√≥n:', error);
        throw error;
      });
  }

  /**
   * Registra un nuevo usuario con email y contrase√±a
   */
  register(email: string, password: string): Promise<void> {
    return createUserWithEmailAndPassword(auth, email, password)
      .then(() => {
        this.isLoggedInSubject.next(true);
        console.log('üÜï Usuario registrado y logueado');
      })
      .catch((error) => {
        console.error('‚ùå Error al registrar usuario:', error);
        throw error;
      });
  }

  /**
   * Cierra sesi√≥n y redirige al login
   */
  logout(): Promise<void> {
    return signOut(auth)
      .then(() => {
        this.isLoggedInSubject.next(false);
        this.router.navigate(['/auth/login']);
        console.log('üîí Sesi√≥n cerrada');
      })
      .catch((error) => {
        console.error('‚ùå Error al cerrar sesi√≥n:', error);
        throw error;
      });
  }

  /**
   * Retorna si el usuario est√° autenticado (sincr√≥nico)
   */
  isAuthenticated(): boolean {
    return this.isLoggedInSubject.value;
  }

  /**
   * Devuelve un observable del estado de autenticaci√≥n
   */
  getAuthStatus() {
    return this.isLoggedInSubject.asObservable();
  }
}
